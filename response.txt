Answer to Question 2:
I would reject the code because:
a. It would alaways return an error since the enpoint needs to be accessed using a POST Method.
b. The code is not reusable, extensible and resilient. It would at least cause PHP warning.
c. The code is not testable.
I would advice the author of the code to use decorator pattern to implement the code. 
He / she should also make use of a HTTPClient to interact with the API (supermetrics). 
The HTTPClient should be passed into the decorator using Dependency Injection (preferrably constructor injection).
I would also advice the author of the code to make use of interface injection, this would make the client testable and interchangeable.

3. I would refactor the code by making use of classes. 
I would have a Request Class and a method called getMasterEmail().
This method would encapsulate all the details and checks needed to get email from $_REQUEST.
The global variable $_REQUEST would be passed into the Request Class using dependency injection (preferably constructor injection).
Since it is an array, we can just subtitute it for with our array values when we want to test.

I would make use of the repository pattern for the database section. I would have a method called getUsersByEmail(string $email).
This method would take a parameter called email. The parameter would be passed as an argument to the query string.
The connection to the database would be passed into the repository using Interface Dependency Injection, hence make it possible for us to test by interchanging it as the need might be.
I would also make use of PDO to interact with the database. This brings in OOP into my code all through and also gives me the opportunity to work with prepared statements.
Prepared statements has 2 main adavantages:
a. Queries run faster.
b. It also protect the system from SQL inject attacks.

4. I don't have a straight answer for this. 
It would depend on pros and cons of using that class/library from the external framework / package in my project.
I would have to check how long it would take me / team to implement the class / library.
What would be the cost of maintianing the class / library, if we implemented it ourselves.
On a scale of 1-10 what would be the difficulty a new member would face in adapting to using the our implemented class / library.
For the class / library from an external pacakage / framework, i would check if it is still in active maintainance.
Dependening on the score cards i get from the above factors, would determine if i would use a library / class from an external pacakage / framework.
